import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:mqtt_client/mqtt_client.dart';
import 'package:path_provider/path_provider.dart';
import 'package:photo_view/photo_view.dart';
import 'package:untitled/data/network/mqtt_client.dart';

final client2 = MqttNetwork.client();
Timer? timer;
Uint8List? imagePetengoran;

class PhotoPage extends StatefulWidget {
  const PhotoPage({Key? key}) : super(key: key);

  @override
  State<PhotoPage> createState() => _PhotoPageState();
}

class _PhotoPageState extends State<PhotoPage> {
  @override
  void initState() {
    timer = Timer.periodic(const Duration(seconds: 1), updateDataSource);
    timer;

    super.initState();
    clientConnect();
    loadData();
  }

  void clientConnect() async {
    try {
      await client2.connect();
      debugPrint("Image MQTT Connected");
      client2.subscribe('image/petengoran', MqttQos.atLeastOnce);
    } catch (e) {
      debugPrint(e.toString());
      client2.disconnect();
    }
  }

  loadData() async {
    client2.updates!.listen((List<MqttReceivedMessage<MqttMessage>> c) async {
      final MqttPublishMessage message = c[0].payload as MqttPublishMessage;
      final payload =
          MqttPublishPayload.bytesToStringAsString(message.payload.message);
      Uint8List imageDecode = base64Decode(payload);
      imagePetengoran = imageDecode;

      Directory appDocDir = await getApplicationDocumentsDirectory();
      String appDocPath = appDocDir.path;
      new File('$appDocPath/my_file.txt')
          .writeAsStringSync('myVar: $imageDecode');

      debugPrint(imageDecode.toString());
      setState(() {
        imagePetengoran = imageDecode;
      });
    });
  }

  void updateDataSource(Timer timer) {
    loadData();
    setState(() {});
  }

  @override
  void dispose() {
    timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      child: imagePetengoran != null
          ? Image.memory(imagePetengoran!)
          : const Icon(Icons.image),
    );
  }
}
